// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Zapharaos/go-at (interfaces: SenderService)
//
// Generated by this command:
//
//	mockgen -destination=sender_mock.go -package=goat . SenderService
//

// Package goat is a generated GoMock package.
package goat

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSenderService is a mock of SenderService interface.
type MockSenderService struct {
	ctrl     *gomock.Controller
	recorder *MockSenderServiceMockRecorder
	isgomock struct{}
}

// MockSenderServiceMockRecorder is the mock recorder for MockSenderService.
type MockSenderServiceMockRecorder struct {
	mock *MockSenderService
}

// NewMockSenderService creates a new mock instance.
func NewMockSenderService(ctrl *gomock.Controller) *MockSenderService {
	mock := &MockSenderService{ctrl: ctrl}
	mock.recorder = &MockSenderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSenderService) EXPECT() *MockSenderServiceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSenderService) Send(emailTo, subject, plainTextContent, htmlContent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", emailTo, subject, plainTextContent, htmlContent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSenderServiceMockRecorder) Send(emailTo, subject, plainTextContent, htmlContent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSenderService)(nil).Send), emailTo, subject, plainTextContent, htmlContent)
}
